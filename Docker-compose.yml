services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash" , "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT:-9092}:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${PROJECT_ROOT}/db_conf:/docker-entrypoint-initdb.d:ro
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    volumes:
      - es_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}

  jobmanager:
    image: flink:1.17.2-scala_2.12-java11
    container_name: flink-jobmanager
    hostname: jobmanager
    ports:
      - "8081:8081"
    command: bash -c "cp /extra-jars/*.jar /opt/flink/lib/ && exec /docker-entrypoint.sh jobmanager"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - HADOOP_CONF_DIR=/opt/flink/conf
    volumes:
      - ${PROJECT_ROOT}/flink:/opt/flink/sql
      - ${PROJECT_ROOT}/jars:/extra-jars
      - ${PROJECT_ROOT}/config/config.yaml:/opt/flink/conf/config.yaml
    depends_on:
      - broker
      - postgres
      - elasticsearch

  taskmanager:
    image: flink:1.17.2-scala_2.12-java11
    container_name: flink-taskmanager
    hostname: taskmanager
    command: bash -c "cp /extra-jars/*.jar /opt/flink/lib/ && exec /docker-entrypoint.sh taskmanager"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - HADOOP_CONF_DIR=/opt/flink/conf
    volumes:
      - ${PROJECT_ROOT}/flink:/opt/flink/sql
      - ${PROJECT_ROOT}/jars:/extra-jars
      - ${PROJECT_ROOT}/config/config.yaml:/opt/flink/conf/config.yaml
    depends_on:
      - jobmanager

  taskmanager2:
    image: flink:1.17.2-scala_2.12-java11
    container_name: flink-taskmanager2
    hostname: taskmanager2
    command: bash -c "cp /extra-jars/*.jar /opt/flink/lib/ && exec /docker-entrypoint.sh taskmanager"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - HADOOP_CONF_DIR=/opt/flink/conf
    volumes:
      - ${PROJECT_ROOT}/flink:/opt/flink/sql
      - ${PROJECT_ROOT}/jars:/extra-jars
      - ${PROJECT_ROOT}/config/config.yaml:/opt/flink/conf/config.yaml
    depends_on:
      - jobmanager

volumes:
  es_data:
  postgres_data: